What is the input to the program?
What is the output of the program?
What is the input to each recursive call?
What is the output of each recursive call?


1.) Counting Sheep - Write a recursive function to count how many sheep jump over the fence

Input: 3
Output:
3: Another sheep jumps over the fence
2: Another sheep jumps over the fence
1: Another sheep jumps over the fence
All sheep jumped over the fence

let num = 3

function countingSheep(num) {
    // base case to stop function
    if (num === 0) {
        console.log('All sheep jumped over the fence')
    }   
    // recursive function call, instructions, and reduction
    else { 
        console.log((`${num}: Another sheep jumps over the fence`))
        countingSheep(num - 1)
        }
}

countingSheep(num)

// Recursive calls step by step: 
    3: Another sheep jumps over the fence
    2: Another sheep jumps over the fence
    1: Another sheep jumps over the fence
    All sheep jumped over the fence

2.) Power Calculator - Write a function called powerCalculator() that takes two parameters, an 
integer as a base, and another integer as an exponent. The function returns the value of the base 
raised to the power of the exponent. Use only exponents greater than or equal to 0 (positive numbers)

// powerCalculator(10,2) should return 100
// powerCalculator(10,-2) should return exponent should be >= 0


function powerCalculator(base, exponent){
// handles negative exponents
    if (exponent < 0) {
        return 'exponent should be >= 0'
    }
// base case to stop function
    if (exponent === 0) {
        return 1
    }
// recursive function call, instructions, and reduction
    else {
        return base * powerCalculator(base, exponent -1)
    }
}

// Recursive calls step by step:  
    powerCalculator(10,2) 
        10 * powerCalculator(10, 1)
            10(10 * 1) = 100
    
    powerCalculator(10, -2) 
        'exponent should be >= 0'

3.) Reverse String - Write a function that reverses a string. Take a string as input, 
reverse the string, and return the new string.

function reverseString(str){
  //base call
  if (!str.length) {
    return '';
  }

  //slice last char of string and concatenate to recursive call 
  const indexLastChar = str.length -1;

  //Remove last char of string
  const strArr = Array.from(str);
  strArr.splice(indexLastChar, 1);

  return str.charAt(indexLastChar) + reverseString(strArr.join(''));
}
console.log(reverseString('abcd'))

// Recursive calls step by step:  
    reverseString('abcd')
        'bcd' + 'a' 
            'cd' + 'b'
                'd' + 'c'
                    '' + 'd' 
                        'd' + 'c' + 'b' + 'a' = 'dcba'


4. nth Triangular Number
Calculate the nth triangular number. A triangular number counts the objects that can form an 
equilateral triangle. The nth triangular number is the number of dots composing a triangle with 
n dots on a side, and is equal to the sum of the n natural numbers from 1 to n. This is the 
Triangular Number Sequence: 1, 3, 6, 10, 15, 21, 28, 36, 45.

function triangular(n) {

    let result = []
    
    if (i === 1) {
        result.push(1)
    }
    
    else {
        result.push(n + triangular(n-1))
    }
}


5. Write a recursive function that splits a string based on a separator 
(similar to String.prototype.split). Don't use JS array's split function to solve this problem.

Input: 02/20/2020
Output: ["02", "20", "2020"]

function splitString(string, separator) {
    if (string.length === 0) {
        return '';
    }
    else if (string[0] === separator) {
        return splitString(string.slice(1), separator);
    }
    else {
        return string[0] + splitString(string.slice(1), separator)
    }
}

console.log(splitString('04/15/2020', '/'));


6. Fibonacci - Write a recursive function that prints the Fibonacci sequence of a given number. The 
Fibonacci sequence is a series of numbers in which each number is the sum of the 2 preceding numbers. 
For example, the 7th Fibonacci number in a Fibonacci sequence is 13. 
The sequence looks as follows: 1, 1, 2, 3, 5, 8, 13.

function fibonacci(num){

    if (num === 2){return [1, 1]}
   
   let fibArray = fibonacci(num - 1)
   fibArray.push(fibArray[fibArray.length - 1] + fibArray[fibArray.length - 2])
   return fibArray
 }
 
 console.log(fibonacci(10))

// Recursive calls step by step:

fib(1) = 1
fib(2) = 1
fib(3) = fib(2) + fib(1) = 1 + 1 = 2
fib(4) = fib(3) + fib(2) = 2 + 1 = 3
fib(5) = fib(4) + fib(3) = 3 + 2 = 5


7. Factorial - Write a recursive function that finds the factorial of a given number. The 
factorial of a number can be found by multiplying that number by each number between itself 
and 1. For example, the factorial of 5 is 5 * 4 * 3 * 2 * 1 = 120

function factorial(n){
   if (n === 0) return 1
   return n * factorial(n-1)
}

factorial(5)

// Recursive calls step by step:
    5 * factorial(4)
        4 * factorial(3)
            3 * factorial(2)
                2 * factorial(1)
                    1 * 2 * 3 * 4 * 5 = 120

8. Find a way out of the maze - You have entered a Maze and need to find your way out of it. 
There are more than one possible paths through the Maze to the single exit point. Write a recursive 
function that will help you find a possible path through the maze.

The Maze is represented as a N*M matrix (in the above case, a 3X3 or a 5X7 array). The starting point 
is the top left corner and the exit is indicated by e. For simplicity purpose, use the bottom right corner 
of the maze as the exit. You can't go outside the boundaries of the maze. The maze has passages that are blocked 
and you can't go through them. These blocked passages are indicated by *. Passing through a blocked cell as well 
as passing though a cell that you have already passed before are forbidden.

let mySmallMaze = [
    ['X', ' ', ' '],
    [' ', '*', ' '],
    [' ', ' ', 'e']
]

let maze = [
    ['X', ' ', ' ', '*', ' ', ' ', ' '],
    ['*', '*', ' ', '*', ' ', '*', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', '*', '*', '*', '*', '*', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', 'e']
]

/**
 * Start at the starting point given in fx
 * 
 */

const mazeRunner = function(maze){
    const completed = []
    const mazeRun = function(currMaze, currLocation, letters=""){
        //Check if we can go right.
        if (currLocation[1]<currMaze[0].length-1){
            if (currMaze[currLocation[0]][currLocation[1]+1] === "e"){
                const newletters = letters + "R"
                completed.push(newletters)
                //console.log(newletters,"done")
                return newletters
            }
            if (currMaze[currLocation[0]][currLocation[1]+1] === " "){
                const newletters = letters + "R"
                currMaze[currLocation[0]][currLocation[1]+1]= "X"
                //console.log(newletters)
                //console.log(currMaze)
                mazeRun([...currMaze],[currLocation[0],currLocation[1]+1],newletters)
            }
        }
        //Check if we can go down.
        if(currLocation[0]<currMaze.length-1){
            if (currMaze[currLocation[0]+1][currLocation[1]] === "e"){
                letters = letters + "D"
                //console.log(letters,"done")
                completed.push(letters)
                return letters
            }
            if (currMaze[currLocation[0]+1][currLocation[1]] === " "){
                const newletters = letters + "D"
                currMaze[currLocation[0]+1][currLocation[1]]= "X"
                //console.log(newletters)
                //console.log(currMaze)
                mazeRun([...currMaze],[currLocation[0]+1,currLocation[1]],newletters)
            }
        }
        //Check if we can go left.
        if(currLocation[0]>0){
            if (currMaze[currLocation[0]][currLocation[1]-1] === "e"){
                const newletters = letters + "L"
                //console.log(newletters,"done")
                completed.push(newletters)
                return newletters
            }
            if (currMaze[currLocation[0]][currLocation[1]-1] === " "){
                const newletters = letters + "L"
                currMaze[currLocation[0]][currLocation[1]-1]= "X"
                //console.log(newletters)
                //console.log(currMaze)
                mazeRun([...currMaze],[currLocation[0],currLocation[1]-1],newletters)
            }
        }
        //Check if we can go up.
        if (currLocation[0]>0){
            if (currMaze[currLocation[0]-1][currLocation[1]] === "e"){
                const newletters = letters + "U"
                //console.log(newletters,"done")
                completed.push(newletters)
                return newletters
            }
            if (currMaze[currLocation[0]-1][currLocation[1]] === " "){
                const newletters = letters + "U"
                currMaze[currLocation[0]-1][currLocation[1]]= "X"
                //console.log(newletters)
                //console.log(currMaze)
                mazeRun([...currMaze],[currLocation[0]-1,currLocation[1]],newletters)
            }
        }
    }
    
    
    var i = 0
    while (i<maze.length){
        console.log(maze[i])
        i++
    }
    mazeRun([...maze],[0,0])
    console.log(completed)
    //return a solution
    return completed[0]
}

console.log(mazeRunner(mySmallMaze))
//console.log("*"*20)
console.log(mazeRunner(maze))

9. Find all ways out of the maze above -

let mySmallMaze = [
    ['X', ' ', ' '],
    [' ', '*', ' '],
    [' ', ' ', 'e']
]

let maze = [
    ['X', ' ', ' ', '*', ' ', ' ', ' '],
    ['*', '*', ' ', '*', ' ', '*', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', ' '],
    [' ', '*', '*', '*', '*', '*', ' '],
    [' ', ' ', ' ', ' ', ' ', ' ', 'e']
]

/**
 * Start at the starting point given in fx
 * 
 */

const mazeRunner = function(maze){
    const completed = []
    const mazeRun = function(currMaze, currLocation, letters=""){
        //Check if we can go right.
        if (currLocation[1]<currMaze[0].length-1){
            if (currMaze[currLocation[0]][currLocation[1]+1] === "e"){
                const newletters = letters + "R"
                completed.push(newletters)
                //console.log(newletters,"done")
                return newletters
            }
            if (currMaze[currLocation[0]][currLocation[1]+1] === " "){
                const newletters = letters + "R"
                currMaze[currLocation[0]][currLocation[1]+1]= "X"
                //console.log(newletters)
                //console.log(currMaze)
                mazeRun([...currMaze],[currLocation[0],currLocation[1]+1],newletters)
            }
        }
        //Check if we can go down.
        if(currLocation[0]<currMaze.length-1){
            if (currMaze[currLocation[0]+1][currLocation[1]] === "e"){
                letters = letters + "D"
                //console.log(letters,"done")
                completed.push(letters)
                return letters
            }
            if (currMaze[currLocation[0]+1][currLocation[1]] === " "){
                const newletters = letters + "D"
                currMaze[currLocation[0]+1][currLocation[1]]= "X"
                //console.log(newletters)
                //console.log(currMaze)
                mazeRun([...currMaze],[currLocation[0]+1,currLocation[1]],newletters)
            }
        }
        //Check if we can go left.
        if(currLocation[0]>0){
            if (currMaze[currLocation[0]][currLocation[1]-1] === "e"){
                const newletters = letters + "L"
                //console.log(newletters,"done")
                completed.push(newletters)
                return newletters
            }
            if (currMaze[currLocation[0]][currLocation[1]-1] === " "){
                const newletters = letters + "L"
                currMaze[currLocation[0]][currLocation[1]-1]= "X"
                //console.log(newletters)
                //console.log(currMaze)
                mazeRun([...currMaze],[currLocation[0],currLocation[1]-1],newletters)
            }
        }
        //Check if we can go up.
        if (currLocation[0]>0){
            if (currMaze[currLocation[0]-1][currLocation[1]] === "e"){
                const newletters = letters + "U"
                //console.log(newletters,"done")
                completed.push(newletters)
                return newletters
            }
            if (currMaze[currLocation[0]-1][currLocation[1]] === " "){
                const newletters = letters + "U"
                currMaze[currLocation[0]-1][currLocation[1]]= "X"
                //console.log(newletters)
                //console.log(currMaze)
                mazeRun([...currMaze],[currLocation[0]-1,currLocation[1]],newletters)
            }
        }
    }
    
    
    var i = 0
    while (i<maze.length){
        console.log(maze[i])
        i++
    }
    mazeRun([...maze],[0,0])
    //console.log(completed)
    //return all solution
    return completed
}

console.log(mazeRunner(mySmallMaze))
//console.log("*"*20)
console.log(mazeRunner(maze))

10. Anagrams - An anagram is any word or phrase that uses the letters of a given ("subject") word or 
phrase in another, rearranged order. Write a function that creates an anagram list, listing all the 
rearrangements of a given word. For example, if the user types "east", the program should list all 
24 permutations, including "eats", "etas", "teas", and non-words like "tsae".

Hint: For your algorithm, you might want to think about a prefix and use that to create the new words. 
For example, given "east", use "e" as a prefix and place it in front of all 6 permutations of "ast" — 
"ast", "ats", "sat", "sta", "tas", and "tsa". This will give you the words "east", "eats", "esat", "esta", 
"etas", and "etsa". Continue this way until you find all the anagrams for "east". Then you can use "a" as 
a prefix and permute the remaining words "est". For "east", there should be 24 words.

function getAnagrams(prefix, word) {
    if (word.length <= 1) {
        console.log(prefix + word);
    }
    else {
        for (let i = 0; i < word.length; i++) {
            const currentWord = word.substring(i, i + 1);
            const wordBefore =  word.substring(0, i);
            const wordAfter = word.substring(i + 1);
            getAnagrams(prefix + currentWord, wordBefore + wordAfter);
        }
    }
};

getAnagrams('', 'east');

11. Organization Chart - Write a recursive function that prints the following organization chart. Your output 
should be as shown below with proper indentation to show the hierarchy. You may store the org chart in an object 
and send that as an input to your program.

const org = [
  {id: 'Zuckerberg', boss: null},
  {id: 'Schroepfer', boss: 'Zuckerberg'},
  {id: 'Schrage', boss: 'Zuckerberg'},
  {id: 'Sandberg', boss: 'Zuckerberg'},
  {id: 'Bosworth', boss:'Schroepfer' },
  {id: 'Zhao', boss:'Schroepfer' },
  {id: 'Steve', boss:'Bosworth' },
  {id: 'Kyle', boss:'Bosworth' },
  {id: 'Andra', boss:'Bosworth' },
  {id: 'Richie', boss: 'Zhao'},
  {id: 'Sofia', boss: 'Zhao'},
  {id: 'Jen', boss: 'Zhao'},
  {id: 'VanDyck', boss:'Schrage' },
  {id: 'Swain', boss:'Schrage' },
  {id: 'Sabrina', boss:'VanDyck' },
  {id: 'Michelle', boss:'VanDyck' },
  {id: 'Josh', boss:'VanDyck' },
  {id: 'Blanch', boss:'Swain' },
  {id: 'Tom', boss:'Swain' },
  {id: 'Joe', boss:'Swain' },
  {id: 'Goler', boss:'Sandberg' },
  {id: 'Hernandez', boss:'Sandberg' },
  {id: 'Moissinac', boss:'Sandberg' },
  {id: 'Kelley', boss:'Sandberg' },
  {id: 'Eddie', boss:'Goler' },
  {id: 'Julie', boss:'Goler' },
  {id: 'Annie', boss:'Goler' },
  {id: 'Rowi', boss:'Hernandez'},
  {id: 'Inga', boss:'Hernandez'},
  {id: 'Morgan', boss:'Hernandez'},
  {id: 'Amy', boss:'Moissinac'},
  {id: 'Chuck', boss:'Moissinac'},
  {id: 'Vinni', boss:'Moissinac'},
  {id: 'Eric', boss:'Kelley'},
  {id: 'Ana', boss:'Kelley'},
  {id: 'Wes', boss:'Kelley'},
];

function organizeTree(org, boss) {
    let tree = {};

    org.filter(item => item.boss === boss).forEach(item => tree[item.id] = organizeTree(org, item.id))
    
    return tree;
}

console.log(JSON.stringify(organizeTree(org, null)));

12. Binary Representation - Write a recursive function that prints out the binary representation 
of a given number. For example, the program should take 3 as an input and print 11 as output, or 
25 as an input and print 11001 as an output. Note that the binary representation of 0 should be 0.

function convertToBinary(input){
    if(input > 0){
      let binaryFormat = Math.floor(input % 2);
      return (convertToBinary(Math.floor(input / 2)) + binaryFormat)
    } else {return ''}
  }

convertToBinary(3)



