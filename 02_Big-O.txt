

1a.) Golden Retriever 
15 people in a room / Shout: Anyone else have a retriever / "I do..."
Answer - Constant time: O(1) - The number of people in the room can change... there will always be only a question 
and an answer (or one operation)...

1b.) Golden Retriever - Ask each individual
15 people in a room / ask each person individually until someone has a Golden Retriever
Answer - Linear time: O(n) - You may have to ask each person in the room so the number of operations is directly
proportionate to the number of people in the room...

2.) Even or odd - What is the Big O of:
function isEven(value) {
    if (value % 2 === 0) {
        return true;
    }
    else
        return false;
    }
}
Answer - Constant time: O(1) - The algorithm performs the same number of operations regardless of what the value is.

3.) Are you here? - What is the Big O of:
function areYouHere(arr1, arr2) {
    for (let i = 0; i < arr1.length; i++) {
        const el1 = arr1[i];
        for (let j = 0; j < arr2.length; j++) {
            const el2 = arr2[j];
            if (el1 === el2) return true;
        }
    }
    return false;
}
Answer - Quadratic: O(n^2) - This algorithm has a nested loop so the computer has to process the first loop and then process each
possibility with the second loop. The number of operations will increase exponentially (by a factor of 2) as n changes.

4.) Doubler - What is the Big O of: 
function doubleArrayValues(array) {
    for (let i = 0; i < array.length; i++) {
        array[i] *= 2;
    }
    return array;
}
Answer - Linear Time: O(n) - This algorithm has to loop through and perform operations on each value in the array. The number of
operations is directly proportionate to the length of the array.

5.) Naive search - What is the Big O of: 
function naiveSearch(array, item) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] === item) {
            return i;
        }
    }
}
Answer - Linear Time: O(n) - This algorithm has to loop through and perform operations on each value in the array. The number of
operations is directly proportionate to the length of the array.

6.) Creating pairs - What is the Big O of:
function createPairs(arr) {
    for (let i = 0; i < arr.length; i++) {
        for(let j = i + 1; j < arr.length; j++) {
            console.log(arr[i] + ", " +  arr[j] );
        }
    }
}
Answer - Quadratic: O(n^2) - This algorithm has a nested loop so the computer has to process the first loop and then process each
possibility with the second loop. The number of operations will increase exponentially (by a factor of 2) as n changes.

7.) Compute the sequence - What does this algorithm do? What is its runtime complexity?
function compute(num) {
    let result = [];
    for (let i = 1; i <= num; i++) {

        if (i === 1) {
            result.push(0);
        }
        else if (i === 2) {
            result.push(1);
        }
        else {
            result.push(result[i - 2] + result[i - 3]); 
        }
    }
    return result;
}
Answer - This algorithm returns the Fibonacci sequence. The runtime complexity is O(n) as the number of operations is directly
proportionate to the length of the array.

8.) An efficient search - Assuming the input array is always sorted, what is the Big O of:
function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {
            minIndex = currentIndex + 1;
        }
        else if (currentElement > item) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}
Answer - Logarithmic: O(log n) - Given that question states the numbers in the array are always in order, this algorithm 
reduces the length of the array each time it runs until it finds the number it is looking for.

9.) Random element - What is the Big O of:
function findRandomElement(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
Answer - Constant: O(1) - Regardless of the length of the array, this algorithm is performing the same number of operations...
selecting a random number, multiplying it by the length of the array, then rounding the number down to nearest whole number.

10.) What Am I - What does the following algorithm do? What is the Big O?
function isWhat(n) {
    if (n < 2 || n % 1 !== 0) {
        return false;
    }
    for (let i = 2; i < n; ++i) {
        if (n % i === 0) return false;
    }
    return true;
}
Answer - The algorithm returns true if the given number is prime and false if it is not prime. 
Linear time: O(n) - The number of operations is directly proportionate to the length of the array.

11. Tower of Hanoi -
The Tower of Hanoi is a very famous mathematical puzzle (some call it game!). This is how it goes:

There are three rods and a number of disks of different sizes which can slide onto any rod. 
The puzzle starts with the disks neatly stacked in ascending order of size on one rod, the 
smallest disk at the top (making a conical shape). The other two rods are empty to begin with.

The goal of the puzzle is to move the entire stack of rods to another rod (can't be the original 
rod where it was stacked before) where it will be stacked in the ascending order as well. This 
should be done obeying the following rules: i) Only one disk may be moved at a time ii) Each move 
consists of taking the upper disk from one of the rods and sliding it onto another rod, on top of 
the other disks that may already be present on that rod. iii) A larger disk may not placed on 
top of a smaller disk

// Input:

Rod A   Rod B   Rod C
----		
---------		
-------------

// Output:

Rod A   Rod B   Rod C
                ----
                 ---------
                -------------
+ Derive an algorithm to solve the Tower of Hanoi puzzle.
+ Implement your algorithm using recursion. Your program should display 
    each movement of the disk from one rod to another.
 + If you are given 5 disks, how do the rods look like after 7 recursive calls?
 + How many moves are needed to complete the puzzle with 3 disks? with 4 disks? with 5 disks?
 + What is the runtime of your algorithm?

function TOH(n, sour, temp, dest) {
  if ( n >= 1) {
    // recursively call, but swap dest with temp
    TOH( n-1, sour, dest, temp )
    // print from => to
    print(sour, dest)
    // recursively call, but sqp sour with temp
    TOH( n-1, temp, sour, dest )
  }
}

function print(a, b) {
  console.log(`moving ${a} => ${b}`)
}

TOH(4, 'A', 'B', 'C')


//If you are given 5 disks, how do the rods look like after 7 recursive calls?

_--_--_
_--_--_
_--_--1
4--_--2
5--_--3
=======
A--B--C

// How many moves are needed to complete the puzzle with 3 disks? with 4 disks? with 5 disks?
3 disks = 7
4 disks = 15
5 disks = 31

// What is the runtime of your algorithm?
O(2^n) Exponential time


  // // n = 1
  // if (n === 1) {                // A => C  1
  //   print(sour, dest)
  // }
  // // TOH(n-1, source, temp, dest)
  // // n = 2
  // if (n === 2) {
  //   print(sour, temp)          // A => B  1
  //   print(sour, dest)          // A => C  2
  //   print(temp, dest)          // B => C  3
  // }
  // // n = 3
  // if (n === 3) {
  //   print(sour, dest)          // A => C  1
  //   print(sour, temp)          // A => B  2
  //   print(dest, temp)          // C => B  3
  //   print(sour, dest)          // A => C  4
  //   print(temp, sour)          // B => A  5
  //   print(temp, dest)          // B => C  6
  //   print(sour, dest)          // A => C  7
  // }
  // if (n === 4) {
  //   print(sour, dest)          // A => C  1
  //   print(sour, temp)          // A => B  2
  //   print(dest, temp)          // C => B  3
  //   print(sour, dest)          // A => C  4
  //   print(sour, temp)          // A => B  5
  //   print(dest, sour)          // C => A  6
  //   print(temp, dest)          // B => C  7
  //   print(sour, dest)          // A => C  8
  //   print(temp, sour)          // B => A  9
  //   print(temp, dest)          // B => C 10
  //   print(sour, dest)          // A => C 11
  // }


// let one = {1: `
//   1==========
//   S++_++_
//   -------
//   A++B++C

//     2==========
//     _++_++S
//     -------
//     A++B++C
// `}
// let two = {2: `
//   1==========
//   S++_++_
//   M++_++_
//   -------
//   A++B++C

//     2==========
//     _++_++_
//     M++S++_
//     -------
//     A++B++C

//       3==========
//       _++_++_
//       _++S++M
//       -------
//       A++B++C

//         4==========
//         _++_++S
//         _++_++M
//         -------
//         A++B++C
// `}
// let three = {3: `
//   1==========
//   S++_++_
//   M++_++_
//   L++_++_
//   -------
//   A++B++C

//     2==========
//     _++_++_
//     M++_++_
//     L++_++S
//     -------
//     A++B++C

//       3==========
//       _++_++_
//       _++_++_
//       L++M++S
//       -------
//       A++B++C

//         4==========
//         _++_++_
//         _++S++_
//         L++M++_
//         -------
//         A++B++C

//           5==========
//           _++_++_
//           _++S++_
//           _++M++L
//           -------
//           A++B++C

//             6==========
//             _++_++_
//             _++_++_
//             S++M++L
//             -------
//             A++B++C

//               7==========
//               _++_++_
//               _++_++M
//               S++_++L
//               -------
//               A++B++C

//                 8==========
//                 _++_++S
//                 _++_++M
//                 _++_++L
//                 -------
//                 A++B++C
// `}
// let four = {4: `
//   1==========
//   S++_++_
//   M++_++_
//   L++_++_
//   V++_++_
//   -------
//   A++B++C

//     2========== // A => C  1
//     _++_++_
//     M++_++_
//     L++_++
//     V++_++S
//     -------
//     A++B++C

//       3========== // A => B  2
//       _++_++_
//       _++_++_
//       L++_++_
//       V++M++S
//       -------
//       A++B++C

//         4========== // C => B  3
//         _++_++_
//         _++_++_
//         L++S++_
//         V++M++_
//         -------
//         A++B++C

//           5========== // A => C  4
//           _++_++_
//           _++_++_
//           _++S++_
//           V++M++L
//           -------
//           A++B++C

//             6========== // A => B  5
//             _++_++_
//             _++V++_
//             _++S++_
//             _++M++L
//             -------
//             A++B++C

//               7========== // C => A  6
//               _++_++_
//               _++V++_
//               _++S++_
//               L++M++_
//               -------
//               A++B++C

//                 8========== // B => C  7
//                 _++_++_
//                 _++_++_
//                 _++S++_
//                 L++M++V
//                 -------
//                 A++B++C

//                   9========== // A => C  8
//                   _++_++_
//                   _++_++_
//                   _++S++L
//                   _++M++V
//                   -------
//                   A++B++C

//                     10========= // B => A  9
//                     _++_++_
//                     _++_++_
//                     _++_++L
//                     S++M++V
//                     -------
//                     A++B++C

//                       11========= // B => C 10
//                       _++_++_
//                       _++_++M
//                       _++_++L
//                       S++_++V
//                       -------
//                       A++B++C

//                         12========= // A => C 11
//                         _++_++S
//                         _++_++M
//                         _++_++L
//                         _++_++V
//                         -------
//                         A++B++C
// `}

12. Iterative Version of Recursive Drills 1 - 7

(1.)Counting Sheep - 
function countingSheep(num) {
  for(let i = 0; i < num; i++) {
    console.log(`${num - i}: Another sheep jump over the fence`)
  }
  console.log(`All sheep jumped over the fence`)
}

countingSheep(3)

(2.)Power Calculator - 
function powerCalculator(base, expo) {
  let total = 1;
  for(let i = 0; i < expo; i++) {
    total *= base
  }
  console.log(total)
}

powerCalculator( 10, -2 )

(3.)Reverse String - 
function reverseString(str) {
  let output = ''
  for (let i = 0; i < str.length; i++) {
    output = str[i] + output
  }
  console.log(output)
}

console.log(reverseString('abcd'))

(4.)Triangular Number - 
function nthTriangle(num) {
  let output = 0
  for( let i = 0; i < num; i++) {
    output += num - i
  }
  console.log(output)
}

nthTriangle(4)

(5.)String Splitter - 
function splitString(str, separator) {
  let output = ''
  for(let i = 0; i < str.length; i++) {
    if(str[i] !== separator) {
      output += str[i]
    }
  }
  console.log(output)
}

splitString('02/20/2020', '/')

(6.)Fibonacci - 
function fibonacci(num) {
    let result = [];
    for (let i = 1; i <= num; i++) {
        
        if (i === 1) {
            result.push(1);
        }
        else if (i === 2) {
            result.push(1);
        }
        else {
            result.push(result[i - 2] + result[i - 3]); 
        }
    }
    return result;
}

fibonacci(8)

(7.) Factorial -
function factorial(num) {
  let output = 1
  for( let i = 1; i <= num; i++) {
    output *= i
  }
  return output
}

factorial(5)

13.) Each of the recursive solutions for drills 1 - 7 of the recursive assignment relies upon
an if / else conditional statement, thus the time complexity for all of the recursive solutions
is O(log n). The time it takes to process the information goes up a little bit when the value
of n goes up from 1 but after that, the time complexity consistently only goes up a little bit.

14.) Because each iterative solution for recursive drills 1 - 7 relies upon a for loop,
the time complexity of all seven drills is O(n). The length of time the algorithm will take is
directly proportionate to how many times the loop has to be processed, or the value of n.



  
